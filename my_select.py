from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
from models import Student, Grade, Subject, Teacher, Group
from sqlalchemy.sql import select

# üîó –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î
DATABASE_URL = "postgresql://postgres:password@localhost:5432/postgres"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)


def select_1():
    """–ó–Ω–∞–π—Ç–∏ 5 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —ñ–∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º –±–∞–ª–æ–º –∑ —É—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤."""
    session = Session()
    result = (
        session.query(Student.name, func.avg(Grade.grade).label("avg_grade"))
        .join(Grade)
        .group_by(Student.id)
        .order_by(func.avg(Grade.grade).desc())
        .limit(5)
        .all()
    )
    session.close()
    return result


def select_2(subject_id):
    """–ó–Ω–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —ñ–∑ –Ω–∞–π–≤–∏—â–∏–º —Å–µ—Ä–µ–¥–Ω—ñ–º –±–∞–ª–æ–º –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    session = Session()
    result = (
        session.query(Student.name, func.avg(Grade.grade).label("avg_grade"))
        .join(Grade)
        .filter(Grade.subject_id == subject_id)
        .group_by(Student.id)
        .order_by(func.avg(Grade.grade).desc())
        .first()
    )
    session.close()
    return result


def select_3(subject_id):
    """–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª —É –≥—Ä—É–ø–∞—Ö –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    session = Session()
    result = (
        session.query(Group.name, func.avg(Grade.grade).label("avg_grade"))
        .join(Student, Student.group_id == Group.id)
        .join(Grade, Grade.student_id == Student.id)
        .filter(Grade.subject_id == subject_id)
        .group_by(Group.id)
        .all()
    )
    session.close()
    return result


def select_4():
    """–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª –Ω–∞ –ø–æ—Ç–æ—Ü—ñ (–ø–æ –≤—Å—ñ–π —Ç–∞–±–ª–∏—Ü—ñ –æ—Ü—ñ–Ω–æ–∫)."""
    session = Session()
    result = session.query(func.avg(Grade.grade)).scalar()
    session.close()
    return result


def select_5(teacher_id):
    """–ó–Ω–∞–π—Ç–∏ —è–∫—ñ –∫—É—Ä—Å–∏ —á–∏—Ç–∞—î –ø–µ–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á."""
    session = Session()
    result = (
        session.query(Subject.name)
        .filter(Subject.teacher_id == teacher_id)
        .all()
    )
    session.close()
    return result


def select_6(group_id):
    """–ó–Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ."""
    session = Session()
    result = (
        session.query(Student.name)
        .filter(Student.group_id == group_id)
        .all()
    )
    session.close()
    return result


def select_7(group_id, subject_id):
    """–ó–Ω–∞–π—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –æ–∫—Ä–µ–º—ñ–π –≥—Ä—É–ø—ñ –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    session = Session()
    result = (
        session.query(Student.name, Grade.grade)
        .join(Grade)
        .filter(Student.group_id == group_id, Grade.subject_id == subject_id)
        .all()
    )
    session.close()
    return result


def select_8(teacher_id):
    """–ó–Ω–∞–π—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª, —è–∫–∏–π —Å—Ç–∞–≤–∏—Ç—å –ø–µ–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á –∑—ñ —Å–≤–æ—ó—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤."""
    session = Session()
    result = (
        session.query(func.avg(Grade.grade))
        .join(Subject, Grade.subject_id == Subject.id)
        .filter(Subject.teacher_id == teacher_id)
        .scalar()
    )
    session.close()
    return result


def select_9(student_id):
    """–ó–Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤, —è–∫—ñ –≤—ñ–¥–≤—ñ–¥—É—î –ø–µ–≤–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç."""
    session = Session()
    result = (
        session.query(Subject.name)
        .join(Grade)
        .filter(Grade.student_id == student_id)
        .distinct()
        .all()
    )
    session.close()
    return result


def select_10(student_id, teacher_id):
    """–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤, —è–∫—ñ –ø–µ–≤–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É —á–∏—Ç–∞—î –ø–µ–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á."""
    session = Session()
    result = (
        session.query(Subject.name)
        .join(Grade)
        .filter(Grade.student_id == student_id, Subject.teacher_id == teacher_id)
        .distinct()
        .all()
    )
    session.close()
    return result


def select_11(teacher_id, student_id):
    """–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª, —è–∫–∏–π –ø–µ–≤–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á —Å—Ç–∞–≤–∏—Ç—å –ø–µ–≤–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤—ñ."""
    session = Session()
    result = (
        session.query(func.avg(Grade.grade))
        .join(Subject)
        .filter(Subject.teacher_id == teacher_id, Grade.student_id == student_id)
        .scalar()
    )
    session.close()
    return result


def select_12(group_id, subject_id):
    """–û—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –ø–µ–≤–Ω—ñ–π –≥—Ä—É–ø—ñ –∑ –ø–µ–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∑–∞–Ω—è—Ç—Ç—ñ."""
    session = Session()
    subquery = (
        session.query(
            Grade.student_id,
            func.max(Grade.date_received).label("last_date")
        )
        .join(Student)
        .filter(Student.group_id == group_id, Grade.subject_id == subject_id)
        .group_by(Grade.student_id)
        .subquery()
    )

    result = (
        session.query(Student.name, Grade.grade)
        .join(Grade)
        .join(subquery, (Grade.student_id == subquery.c.student_id) &
                        (Grade.date_received == subquery.c.last_date))
        .all()
    )
    session.close()
    return result


def run_all_queries():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –æ–¥–∏–Ω –∑–∞ –æ–¥–Ω–∏–º —ñ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    queries = [
        ("üîù Top 5 students", select_1, []),
        ("üèÜ Top student by subject", select_2, [1]),
        ("üìä Average by group + subject", select_3, [1]),
        ("üåç Global average", select_4, []),
        ("üìö Subjects by teacher", select_5, [1]),
        ("üë®‚Äçüéì Students in group", select_6, [1]),
        ("üìù Grades in group + subject", select_7, [1, 1]),
        ("üßë‚Äçüè´ Average by teacher", select_8, [1]),
        ("üéí Subjects by student", select_9, [1]),
        ("üë®‚Äçüè´üìò Subjects by student + teacher", select_10, [1, 1]),
        ("üìà Avg grade from teacher to student", select_11, [1, 1]),
        ("‚è± Last grades in group + subject", select_12, [1, 1]),
    ]

    for i, (description, func_select, args) in enumerate(queries, start=1):
        print("‚Äî" * 50)
        print(f"{i}. {description}")
        result = func_select(*args)
        if result:
            if isinstance(result, list):
                for row in result:
                    print("  ‚û§", row)
            else:
                print("  ‚û§", result)
        else:
            print("  ‚ö†Ô∏è  –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
    print("‚Äî" * 50)


if __name__ == "__main__":
    run_all_queries()
